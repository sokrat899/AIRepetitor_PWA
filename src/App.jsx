import React, { useEffect, useMemo, useState } from 'react'

const DEFAULT_FREE = 25
const LS = {
  credits: 'airep_credits',
  chats: 'airep_chats',
  activeId: 'airep_active'
}
const uid = () => Math.random().toString(36).slice(2)

function loadCredits(){
  const n = Number(localStorage.getItem(LS.credits))
  if (Number.isFinite(n) && n>=0) return n
  localStorage.setItem(LS.credits, String(DEFAULT_FREE))
  return DEFAULT_FREE
}
function saveCredits(n){ localStorage.setItem(LS.credits, String(n)) }

function loadChats(){
  try { return JSON.parse(localStorage.getItem(LS.chats) || '[]') } catch { return [] }
}
function saveChats(chats){ localStorage.setItem(LS.chats, JSON.stringify(chats)) }

const initialMessage = { id: uid(), role: 'assistant', content: '–ü—Ä–∏–≤–µ—Ç! –Ø AIRepetitor. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —É—á–µ–±–µ üòä' }

export default function App(){
  const [credits, setCredits] = useState(loadCredits())
  const [chats, setChats] = useState(loadChats())
  const [activeId, setActiveId] = useState(localStorage.getItem(LS.activeId) || null)
  const [input, setInput] = useState('')
  const [loading, setLoading] = useState(false)
  const [apiKey, setApiKey] = useState(localStorage.getItem('VITE_OPENAI_API_KEY') || '')

  useEffect(() => { saveCredits(credits) }, [credits])
  useEffect(() => { saveChats(chats) }, [chats])
  useEffect(() => { if(!activeId && chats.length){ setActiveId(chats[0].id) } }, [activeId, chats])
  useEffect(() => { localStorage.setItem('VITE_OPENAI_API_KEY', apiKey) }, [apiKey])

  const activeChat = useMemo(() => chats.find(c => c.id===activeId), [chats, activeId])

  function newChat(){
    const id = uid()
    const chat = { id, title: '–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥', created: Date.now(), messages: [initialMessage] }
    const next = [chat, ...chats]
    setChats(next)
    setActiveId(id)
  }
  function renameChat(id){
    const title = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:')
    if(!title) return
    setChats(chats.map(c => c.id===id ? {...c, title} : c))
  }
  function removeChat(id){
    const ok = confirm('–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥?')
    if(!ok) return
    const next = chats.filter(c => c.id!==id)
    setChats(next)
    if(activeId===id) setActiveId(next[0]?.id || null)
  }

  async function ask(){
    if (!input.trim()) return
    if (credits <= 0 && apiKey) { alert('–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –ª–∏–º–∏—Ç.'); return }
    const userMsg = { id: uid(), role: 'user', content: input.trim() }
    setInput('')
    const id = activeId || uid()
    let chat = activeChat
    if(!chat){
      chat = { id, title: '–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥', created: Date.now(), messages: [initialMessage] }
    }
    const newMsgs = [...chat.messages, userMsg, { id: uid(), role: 'assistant', content: '–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º‚Ä¶' }]
    const nextChats = chats.some(c => c.id===id) ? chats.map(c => c.id===id ? {...c, messages: newMsgs} : c) : [{...chat, messages: newMsgs}, ...chats]
    setChats(nextChats)
    setActiveId(id)
    setLoading(true)
    try {
      let answer = ''
      if (apiKey) {
        // Live mode: OpenAI Chat Completions (gpt-4o-mini)
        const resp = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          },
          body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages: [
              { role: 'system', content: '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ò–ò-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –¥–æ–±–∞–≤–ª—è–π –ø—Ä–∏–º–µ—Ä—ã.'},
              ...newMsgs.filter(m => m.role!=='assistant' || m.content!=='–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º‚Ä¶').map(({role, content}) => ({role, content}))
            ]
          })
        })
        if(!resp.ok){
          const text = await resp.text()
          throw new Error('API error: '+text)
        }
        const data = await resp.json()
        answer = data.choices?.[0]?.message?.content || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.'
        // —Å–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
        setCredits(c => Math.max(0, c-1))
      } else {
        // Demo mode
        answer = '–î–µ–º–æ-—Ä–µ–∂–∏–º: –¥–æ–±–∞–≤—å—Ç–µ API-–∫–ª—é—á OpenAI –≤–≤–µ—Ä—Ö—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Ä–∞—Å–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ, –ø—Ä–∏–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–¥—Ö–æ–¥ ‚Äî –∏ —è –ø–æ–º–æ–≥—É —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.'
      }
      setChats(chs => chs.map(c => c.id===id ? {
        ...c,
        messages: c.messages.slice(0, -1).concat([{ id: uid(), role: 'assistant', content: answer }])
      } : c))
    } catch (e){
      setChats(chs => chs.map(c => c.id===id ? {
        ...c,
        messages: c.messages.slice(0, -1).concat([{ id: uid(), role: 'assistant', content: '–û—à–∏–±–∫–∞: '+e.message }])
      } : c))
    } finally {
      setLoading(false)
    }
  }

  function addCredits(n){ setCredits(c => c + n) }

  return (
    <div style={{display:'grid', gridTemplateColumns:'280px 1fr', gap:16, padding:16, height:'100%'}}>
      {/* Sidebar */}
      <aside className="card" style={{padding:16, overflow:'auto'}}>
        <div style={{display:'flex', alignItems:'center', justifyContent:'space-between', gap:8}}>
          <h2 style={{margin:0}}>AIRepetitor</h2>
          <button className="btn btn-primary" onClick={newChat}>+ –ù–æ–≤—ã–π</button>
        </div>
        <div style={{marginTop:12, fontSize:14, opacity:.9}}>–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{credits}</b></div>
        <div style={{display:'flex', gap:8, marginTop:8}}>
          <button className="btn btn-ghost" onClick={()=>addCredits(25)}>–ö—É–ø–∏—Ç—å +25</button>
          <button className="btn btn-ghost" onClick={()=>addCredits(100)}>–ö—É–ø–∏—Ç—å +100</button>
        </div>
        <div style={{marginTop:12}}>
          <label style={{fontSize:12, opacity:.9}}>OpenAI API –∫–ª—é—á (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
          <input className="input" placeholder="sk-..." value={apiKey} onChange={e=>setApiKey(e.target.value)} />
          <div style={{fontSize:12, opacity:.8, marginTop:6}}>–ë–µ–∑ –∫–ª—é—á–∞ –±—É–¥–µ—Ç –¥–µ–º–æ‚Äë–æ—Ç–≤–µ—Ç.</div>
        </div>
        <hr style={{border:'none', borderTop:'1px solid rgba(255,255,255,.2)', margin:'16px 0'}}/>
        <div style={{fontSize:12, opacity:.9, marginBottom:6}}>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤</div>
        <div style={{display:'grid', gap:8}}>
          {chats.map(c => (
            <div key={c.id} className="card" style={{padding:8, cursor:'pointer'}} onClick={()=>setActiveId(c.id)}>
              <div style={{display:'flex', gap:8, alignItems:'center', justifyContent:'space-between'}}>
                <div style={{overflow:'hidden', textOverflow:'ellipsis', whiteSpace:'nowrap', maxWidth:160}}>
                  <b style={{opacity: activeId===c.id ? 1 : .9}}>{c.title}</b>
                  <div style={{fontSize:12, opacity:.8}}>{new Date(c.created).toLocaleString()}</div>
                </div>
                <div style={{display:'flex', gap:6}} onClick={e=>e.stopPropagation()}>
                  <button className="btn btn-ghost" onClick={()=>renameChat(c.id)}>‚úèÔ∏è</button>
                  <button className="btn btn-ghost" onClick={()=>removeChat(c.id)}>üóëÔ∏è</button>
                </div>
              </div>
            </div>
          ))}
          {chats.length===0 && <div className="card" style={{padding:8, fontSize:14, opacity:.9}}>–ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤</div>}
        </div>
      </aside>
      {/* Main */}
      <main className="card" style={{padding:16, display:'grid', gridTemplateRows:'auto 1fr auto', height:'100%'}}>
        <div style={{display:'flex', alignItems:'center', justifyContent:'space-between', gap:8}}>
          <h3 style={{margin:0}}>{activeChat?.title || '–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥'}</h3>
          <div style={{fontSize:12, opacity:.85}}>{loading ? '–ú–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç‚Ä¶' : '–ì–æ—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å–∞–º'}</div>
        </div>
        <div id="messages" style={{overflow:'auto', marginTop:12, display:'grid', gap:10}}>
          {(activeChat?.messages || [initialMessage]).map(m => (
            <div key={m.id} className={'chat fade-in'} style={{justifyContent: m.role==='user' ? 'flex-end' : 'flex-start'}}>
              <div className={'bubble '+(m.role==='user'?'me':'')}>
                <div style={{fontSize:12, opacity:.8, marginBottom:4}}>{m.role==='user'?'–í—ã':'AI'}</div>
                <div style={{whiteSpace:'pre-wrap'}}>{m.content}</div>
              </div>
            </div>
          ))}
        </div>
        <div style={{display:'grid', gap:8, gridTemplateColumns:'1fr auto'}}>
          <textarea className="textarea" placeholder="–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å..." value={input} onChange={e=>setInput(e.target.value)} onKeyDown={e=>{ if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); ask(); }}}/>
          <button className="btn btn-primary" onClick={ask} disabled={loading || (!apiKey && !input.trim())}>{loading?'...':'–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}</button>
        </div>
        <div style={{fontSize:12, opacity:.8, marginTop:6}}>–ü–æ–¥—Å–∫–∞–∑–∫–∞: Shift+Enter ‚Äî –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏</div>
      </main>
    </div>
  )
}